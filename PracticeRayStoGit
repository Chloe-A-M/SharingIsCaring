#this is for vectors
import numpy as np
#this is for trig
import math as math
#this is for graphing
import matplotlib.pyplot as plt
#dot product
from operator import mul
#This is for the random number
import random

x = int(input("Enter initial x coordinate: "))
y = int(input("Enter initial y coordinate: "))
z = int(input("Enter initial z coordinate: "))

initial = [x,y,z]

v_i = np.array(initial)

print("Your initial coordinates are ",v_i)

fid = int(input("Enter azimuthal angle in degrees: "))
thetad = int(input("Enter elevation angle in degrees: "))

fi = math.radians(fid)
theta = math.radians(thetad)

direction1 = [math.cos(fi),math.sin(fi),1]
direction2 = [math.sin(theta),math.cos(theta),math.cos(theta)]

d1 = np.array(direction1)
d2 = np.array(direction2)

direction = d1 * d2

print("Your direction vector is",direction)

raypath = int(input("Enter the spatial step in meters: "))

addition = raypath * direction

v_f = v_i + addition

xcoor = [initial[0]]
ycoor = [initial[2]]

while v_f[2] > 0:
    xcoor.append(v_f[0])
    ycoor.append(v_f[2])
    v_f = v_i + addition
    if v_f[2] <= 0:
        v_0 = v_i[2]
        v_d = direction[2]
        l = (-1*v_0) / v_d
        v_f = (direction * l) + v_i
        xcoor.append(v_f[0])
        ycoor.append(v_f[2])
        break
    v_i = v_f

print(v_f)

#This is where the change comes in
diff = random.randint(0,100)

if diff > 20:
    nom = [0,0,1]
    normal = np.array(nom)
    dots = sum(map(mul, normal, addition))
    dot = dots * -1
    norm = sum(map(mul, normal, normal))
    a = (dot/norm) * normal
    reflec = addition + (2*a)
    print("The reflected direction vector is", reflec)
    finalstep = v_f + reflec
    print("This is the reflected coordinates: (",round(finalstep[0],0),
      round(finalstep[1],0),round(finalstep[2],0),")")
    xcoor.append(finalstep[0])
    ycoor.append(finalstep[2])
    plt.plot(xcoor,ycoor)

elif diff <= 20:
    thymes = int(input("Diffusion has occurred!\nHow many times would you like to ray trace? "))
    steps = int(input("Enter the spatial step for stochastic rays in meters: "))
    while thymes > 0:
        z1 = random.uniform(0,1)
        z2 = random.uniform(0,1)
        fi = (math.acos(math.sqrt(z1)))
        theta = np.pi * z2 * 2
        direction1 = [math.cos(fi),math.sin(fi),1]
        direction2 = [math.sin(theta),math.cos(theta),math.cos(theta)]
        d1 = np.array(direction1)
        d2 = np.array(direction2)
        direction = d1 * d2
        addition = steps * direction
        finalstep = v_f + addition
        xcoor.append(finalstep[0])
        ycoor.append(finalstep[2])
        plt.plot(xcoor,ycoor)
        xcoor.pop()
        ycoor.pop()
        thymes = thymes - 1

plt.axhline(y=0,color='black')
plt.show()














